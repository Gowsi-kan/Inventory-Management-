@page "/expenses"

@inject ISnackbar Snackbar
@inject ExpenseViewModel ExpenseVM

<style>
    .header-class {
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .loading-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: calc(100vh - 240px);
    text-align: center;
    }

    .custom-container {
    display: flex;
    justify-content: center;
    align-items: start;
    height: calc(100vh - 180px);
    }
</style>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudGrid Spacing="2" Class="mt-4">
        <MudItem xs="12" md="3">

            <MudPaper Class="" Height="calc(100vh - 80px)" Elevation="0" Style="border: none;">
                <MudGrid>
                    <MudItem xs="12" md="12">
                        <MudCard Elevation="1" Class="p-2">
                            <MudCardHeader Class="header-class">
                                <MudText Typo="Typo.h6">Company Expense Form</MudText>
                            </MudCardHeader>

                            <MudCardContent>
                                <MudForm Model="@NewExpense" @bind-IsValid="@success" @ref="form">
                                    <MudTextField Label="Expense Name" @bind-Value="NewExpense.ExpenseName" Required="true" />

                                    <MudTextField Label="Expense Amount" @bind-Value="NewExpense.ExpenseAmount" Required="true"
                                    T="float" Adornment="Adornment.End" AdornmentIcon="fa-solid fa-dollar-sign" Class="mt-3" />

                                    <MudSelect Label="Payment Type" @bind-Value="NewExpense.ExpensePaymentType" Class="mt-3" Required="true">
                                        <MudSelectItem Value="@("Cash")">Cash</MudSelectItem>
                                        <MudSelectItem Value="@("Card")">Card</MudSelectItem>
                                        <MudSelectItem Value="@("Cheque")">Cheque</MudSelectItem>
                                        <MudSelectItem Value="@("Bank Transfer")">Bank Transfer</MudSelectItem>
                                    </MudSelect>

                                    <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;" class="mt-3">
                                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                                            <ActivatorContent>
                                                <MudButton Variant="Variant.Filled"
                                                Color="Color.Primary"
                                                StartIcon="@Icons.Material.Filled.CloudUpload"
                                                Size="Size.Small">
                                                    Upload Bill
                                                </MudButton>
                                            </ActivatorContent>
                                        </MudFileUpload>

                                        @if (_files.Any())
                                        {
                                            <MudList T="string">
                                                @foreach (var file in _files)
                                                {
                                                    <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file.Name">
                                                        @file.Name <code>@file.Size bytes</code>
                                                    </MudListItem>
                                                }
                                            </MudList>
                                        }
                                    </div>

                                    <MudButton Type="Submit" OnClick="SaveExpense" Variant="Variant.Filled" Color="Color.Primary" Disabled="!success" StartIcon="@Icons.Material.Filled.Save" Class="mt-4">
                                        Save Expense
                                    </MudButton>
                                </MudForm>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="12">
                        <MudCard Elevation="1" Class="p-2 mt-2" Style="height: calc(100vh - 520px);">
                            <MudCardContent>
                                <MudChart ChartType="ChartType.Line" ChartSeries="@ExpenseSeries"
                                XAxisLabels="@XAxisLabels" Width="100%" Style="height: calc(100vh - 600px);" Class="mb-3"></MudChart>
                            </MudCardContent>
                        </MudCard>

                    </MudItem>
                </MudGrid>
            </MudPaper>

        </MudItem>

        <MudItem xs="12" md="9">
            <MudCard Elevation="1" Class="p-2">
                <MudCardHeader Class="header-class">
                    <MudText Typo="Typo.h6">Expenses</MudText>
                </MudCardHeader>

                <MudCardContent>
                    @if (!IsExpensesLoaded)
                    {
                        <MudContainer Class="loading-container">
                            <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
                                <MudItem>
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2 mt-2" Typo="Typo.subtitle1">Loading Expenses...</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudContainer>
                    }
                    else
                    {
                        <MudTable Items="ExpenseVM.Expenses" T="Expense" Hover="true" Dense="true" FixedHeader Height="calc(100vh - 220px)" Virtualize>
                            <HeaderContent>
                                <MudTh>Expense ID</MudTh>
                                <MudTh>Expense Name</MudTh>
                                <MudTh Style="text-align:right">Amount</MudTh>
                                <MudTh Style="text-align:center">Payment Type</MudTh>
                                <MudTh Style="text-align:center">Bill Uploaded</MudTh>
                                <MudTh Style="text-align:center">Updated Date</MudTh>
                                <MudTh Style="text-align:center">Updated Time</MudTh>
                                <MudTh Style="text-align:right">Actions</MudTh>
                            </HeaderContent>

                            <RowTemplate>
                                <MudTd>@context.ExpenseId</MudTd>
                                <MudTd>@context.ExpenseName</MudTd>
                                <MudTd Style="text-align:right">@context.ExpenseAmount</MudTd>
                                <MudTd Style="text-align:center">
                                    <MudChip T="string" Icon="@GetChipIcon(context.ExpensePaymentType)" IconColor="@GetChipColor(context.ExpensePaymentType)">@context.ExpensePaymentType</MudChip>
                                </MudTd>
                                <MudTd Style="text-align:center">@context.ExpenseBillUploaded</MudTd>
                                <MudTd Style="text-align:center">@context.UpdateDate.ToString("yyyy-MM-dd")</MudTd>
                                <MudTd Style="text-align:center">@context.UpdateDate.ToString("HH:mm:ss")</MudTd>
                                <MudTd Style="text-align:right">
                                    <!-- Edit Button -->
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Primary" OnClick="() => EditExpense(context)" />
                                    <!-- Delete Button -->
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => DeleteExpense(context)" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private bool IsExpensesLoaded { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsExpensesLoaded = false;
        StateHasChanged(); // Refresh UI

        await ExpenseVM.LoadExpenses();

        await Task.Delay(500);
        IsExpensesLoaded = true;
        StateHasChanged(); // Refresh UI
    }

    private Expense NewExpense { get; set; } = new();
    private bool success = false;
    private MudForm form;
    private bool isLoading = false;

    private List<IBrowserFile> _files = new();
    private IBrowserFile? _selectedFile;
    private string? _savedFilePath;

    private async Task UploadFiles(IBrowserFile file)
    {
        if (file != null)
        {
            _selectedFile = file;
            Console.WriteLine($"File selected: {file.Name}");

            _files.Add(file);
            StateHasChanged(); // Refresh UI

            Snackbar.Add($"File selected: {file.Name}", Severity.Success);
        }
    }

    private async Task SaveExpense()
    {
        if (_selectedFile == null)
        {
            Snackbar.Add($"No Bill Added!", Severity.Warning);
            NewExpense.ExpenseBillUploaded = false;
            NewExpense.ExpensesBillFileDir = String.Empty;
        } 
        else
        {
            var uploadPath = Path.Combine("wwwroot", "uploads");
            var filePath = Path.Combine(uploadPath, _selectedFile.Name);

            try
            {
                await using var stream = _selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5); // Max 5MB
                await using var fileStream = new FileStream(filePath, FileMode.Create);
                await stream.CopyToAsync(fileStream);

                // Store the relative URL for display
                NewExpense.ExpensesBillFileDir = $"/uploads/{_selectedFile.Name}";

                // Confirm the file is saved
                if (File.Exists(filePath))
                {
                    NewExpense.ExpenseBillUploaded = true;
                    Snackbar.Add($"File saved: {filePath}", Severity.Success);
                }
                else
                {
                    NewExpense.ExpenseBillUploaded = false;
                    Snackbar.Add($"File NOT found after writing: {filePath}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"File NOT found after writing: {filePath}", Severity.Error);
            }
        }

        try
        {
            if(form != null)
            {
                isLoading = true;
                StateHasChanged(); // Refresh UI

                await form.Validate(); // Ensure form is initialized before validation

                if (!form.IsValid)
                {
                    isLoading = false;
                    return;
                }

                if (success)
                {
                    NewExpense.UpdateDate = DateTime.Now;
                    var response = await ExpenseVM.AddExpense(NewExpense);
                    ShowResponseClose(response);

                    await ExpenseVM.LoadExpenses();
                    StateHasChanged();
                }
            }
        } catch (Exception ex)
        {
            Snackbar.Add($"Error Saving the Expense, {ex.Message}", Severity.Error);
        }

        NewExpense = new();
        success = false;
        _selectedFile = null;
        _files.Clear();
        StateHasChanged();
    }

    private async Task EditExpense(Expense expense)
    {

    }

    private async Task DeleteExpense(Expense expense)
    {

    }

    private Color GetChipColor(string paymentType)
    {
        return paymentType.ToLower() switch
        {
            "cash" => Color.Success,   // Green
            "card" => Color.Primary,   // Blue
            "cheque" => Color.Warning, // Yellow
            "bank" => Color.Secondary, // Grey
            _ => Color.Default         // Default color
        };
    }

    private string GetChipIcon(string paymentType)
    {
        return paymentType.ToLower() switch
        {
            "cash" => Icons.Material.Filled.Money,   
            "card" => Icons.Material.Filled.CreditCard,  
            "cheque" => Icons.Material.Filled.PlaylistAddCheckCircle, // Yellow
            "bank" => @Icons.Material.Filled.CommentBank, // Grey
            _ => Icons.Material.Filled.CommentBank         // Default color
        };
    }

    private async void ShowResponseClose(ResponseModel response)
    {
        // Add 3 seconds delay before stopping loading
        await Task.Delay(500);

        isLoading = false; // Hide loading state
        StateHasChanged(); // Refresh UI

        if (response != null)
        {
            if (response.IsSuccess)
            {
                Snackbar.Add(response.Message, Severity.Success);
                return;
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
                return;
            }
        }
    }

    private int SelectedMonthIndex = -1; // Default to no selection

    private List<ChartSeries> ExpenseSeries => new List<ChartSeries>
    {
        new ChartSeries() { Name = "Monthly Expenses", Data = ExpenseVM.MonthlyExpenses }
    };

    private string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
}
